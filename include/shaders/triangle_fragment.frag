#version 330 core

uniform float u_time;
in vec2 texCoords;
out vec4 fragColor;

vec3 colorA = vec3(0.149, 0.141, 0.912);
vec3 colorB = vec3(1.000, 0.833, 0.224);

void main() {
    float pct = abs(sin(u_time));
    vec3 color = mix(colorA, colorB, pct);
    fragColor = vec4(color, 1.0);
}

// A Fragment Shader is the Shader stage that will process a Fragment generated by the Rasterization into a set of colors and a single depth value.
// The fragment shader is the OpenGL pipeline stage after a primitive is rasterized. For each sample of the pixels covered by a primitive, 
// a "fragment" is generated. Each fragment has a Window Space position, a few other values, and it contains all of the interpolated per-vertex output values from the last Vertex Processing stage.
// The output of a fragment shader is a depth value, a possible stencil value (unmodified by the fragment shader), 
// and zero or more color values to be potentially written to the buffers in the current framebuffers.
// Fragment shaders take a single fragment as input and produce a single fragment as output. 
// https://www.khronos.org/opengl/wiki/Fragment_Shader